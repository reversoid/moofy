name: Deploy

on:
  workflow_dispatch:

concurrency:
  group: "deploy"
  cancel-in-progress: true

jobs:
  migrate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .env file
        run: |
          touch .env

          echo DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.POSTGRES_HOST }}:${{ secrets.POSTGRES_PORT }}/${{ secrets.POSTGRES_DB_NAME }} >> .env

      - name: Run migrations
        id: migration
        run: |
          docker run --rm -v "$(pwd)/db:/db" --env-file .env ghcr.io/amacneil/dbmate up

  deploy:
    needs: migrate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Setup .env file
        run: |
          touch .env

          echo ENV=staging >> .env

          echo COOKIE_SECRET=${{ secrets.COOKIE_SECRET }} >> .env

          echo UNOFFICIAL_KP_API_KEYS=${{ secrets.UNOFFICIAL_KP_API_KEYS }} >> .env

          echo PG_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo PG_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo PG_HOST=${{ secrets.POSTGRES_HOST }} >> .env
          echo PG_PORT=${{ secrets.POSTGRES_PORT }} >> .env
          echo PG_DATABASE=${{ secrets.POSTGRES_DB_NAME }} >> .env
          echo DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.POSTGRES_HOST }}:${{ secrets.POSTGRES_PORT }}/${{ secrets.POSTGRES_DB_NAME }} >> .env

          echo S3_ACCESS_KEY_ID="${{ secrets.S3_KEY_ID }}" >> .env
          echo S3_SECRET_ACCESS_KEY="${{ secrets.S3_KEY_SECRET }}" >> .env
          echo S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}" >> .env

          echo LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }} >> .env

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_PRIVATE_KEY}}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Set up Docker context
        run: |
          docker context create moofy-server --docker "host=ssh://${{secrets.VPS_USERNAME}}@${{secrets.SERVER_IP}}"
          docker context use moofy-server

      - name: Compose test docker
        run: docker --context moofy-server compose --env-file .env -f deploy/docker-compose.yml up --build -d

      - name: Prune system
        run: docker system prune --force

  # TODO can do without copypaste?
  sync-changelog:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          run_install: false
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: pnpm install

      - name: Setup .env file
        run: |
          touch .env

          echo ENV=staging >> .env

          echo COOKIE_SECRET=${{ secrets.COOKIE_SECRET }} >> .env

          echo UNOFFICIAL_KP_API_KEYS=${{ secrets.UNOFFICIAL_KP_API_KEYS }} >> .env

          echo PG_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo PG_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo PG_HOST=${{ secrets.POSTGRES_HOST }} >> .env
          echo PG_PORT=${{ secrets.POSTGRES_PORT }} >> .env
          echo PG_DATABASE=${{ secrets.POSTGRES_DB_NAME }} >> .env
          echo DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.POSTGRES_HOST }}:${{ secrets.POSTGRES_PORT }}/${{ secrets.POSTGRES_DB_NAME }} >> .env

          echo S3_ACCESS_KEY_ID="${{ secrets.S3_KEY_ID }}" >> .env
          echo S3_SECRET_ACCESS_KEY="${{ secrets.S3_KEY_SECRET }}" >> .env
          echo S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}" >> .env

          echo LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }} >> .env

      - name: Run script
        run: pnpm run:one-time sync-changelog

  update-roadmap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          run_install: false
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: pnpm install

      - name: Setup .env file
        run: |
          touch .env

          echo ENV=staging >> .env

          echo COOKIE_SECRET=${{ secrets.COOKIE_SECRET }} >> .env

          echo UNOFFICIAL_KP_API_KEYS=${{ secrets.UNOFFICIAL_KP_API_KEYS }} >> .env

          echo PG_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo PG_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo PG_HOST=${{ secrets.POSTGRES_HOST }} >> .env
          echo PG_PORT=${{ secrets.POSTGRES_PORT }} >> .env
          echo PG_DATABASE=${{ secrets.POSTGRES_DB_NAME }} >> .env
          echo DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.POSTGRES_HOST }}:${{ secrets.POSTGRES_PORT }}/${{ secrets.POSTGRES_DB_NAME }} >> .env

          echo S3_ACCESS_KEY_ID="${{ secrets.S3_KEY_ID }}" >> .env
          echo S3_SECRET_ACCESS_KEY="${{ secrets.S3_KEY_SECRET }}" >> .env
          echo S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}" >> .env

          echo LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }} >> .env

      - name: Run script
        run: pnpm run:one-time update-roadmap

  # TODO what if no migrations were run?
  # we can check for status code? Is this real?
  # Or we can check dbmate status for version
  # Or we can check for "Applying" grep...
  # cleanup:
  #   needs: [migrate, deploy]
  #   if: failure() || cancelled()
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Setup .env file
  #       run: |
  #         touch .env
  #         echo DATABASE_URL=postgresql://${{ secrets.POSTGRES_TEST_USER }}:${{ secrets.POSTGRES_TEST_PASSWORD }}@${{ secrets.POSTGRES_TEST_HOST }}:${{ secrets.POSTGRES_TEST_PORT }}/${{ secrets.POSTGRES_TEST_DB_NAME }} >> .env

  #     - name: Rollback migrations
  #       run: |
  #         docker run --rm -v "$(pwd)/db:/db" --env-file .env ghcr.io/amacneil/dbmate down
